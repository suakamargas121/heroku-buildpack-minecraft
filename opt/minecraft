#!/usr/bin/env bash

mc_port=25566
#mc_port=80

webport=${1:-${PORT:-8080}}
#webport=${PORT}

#mc_port=${webport}

# Minecraft Version to Run
minecraft_version=${MINECRAFT_VERSION:-"latest"}
minecraft_uuid="Unknown UUID"
server=${SERVER:-"purpur"}
server=`echo $server | tr '[:upper:]' '[:lower:]'`

if [ "$server" != "none" ]; then
	echo -n "-----> Searching for Minecraft ${server} ${minecraft_version}... "

	# PURPUR SERVER
	# Purpur works as of 1.17.1 with 500m Memory
	if [ "$server" = "purpur" ]; then
		if [ "$minecraft_version" = "latest" ]; then
			temp=$(wget -qO- https://api.purpurmc.org/v2/purpur/)
			minecraft_version=`echo $temp | rev | cut -d '"' -f 2 | rev`
			temp=$(wget -qO- https://api.purpurmc.org/v2/purpur/${minecraft_version}/)
			minecraft_uuid=`echo $temp | rev | cut -d '"' -f 10 | rev`
			minecraft_url="https://api.purpurmc.org/v2/purpur/${minecraft_version}/${minecraft_uuid}/download"
		else
			minecraft_url="https://api.purpurmc.org/v2/purpur/${minecraft_version}/latest/download"
		fi
	fi

	# TUINITY SERVER
	# Tuinity works as of 1.17.1 with 500m Memory
	if [ "$server" = "tuinity" ]; then
		if [ "$minecraft_version" = "latest" ]; then
			#minecraft_url="https://ci.codemc.io/job/Spottedleaf/job/Tuinity/lastSuccessfulBuild/artifact/tuinity-paperclip.jar"
			echo "Latest JAR Downloader Not Implemented for Tuinity Server"
			exit 1
		else
			minecraft_version=`echo $minecraft_version | rev | cut -d '.' -f 2-3 | rev`
			minecraft_url="https://ci.codemc.io/job/Spottedleaf/job/Tuinity-${minecraft_version}/lastSuccessfulBuild/artifact/tuinity-paperclip.jar"
		fi
	fi

	# PAPER SERVER
	# Paper works as of 1.17.1 with 500m Memory
	if [ "$server" = "paper" ]; then
		if [ "$minecraft_version" = "latest" ]; then
			temp=$(wget -qO- https://papermc.io/api/v2/projects/paper/)
			minecraft_version=`echo $temp | rev | cut -d ',' -f 1 | rev | cut -d '"' -f 2`
			temp=$(wget -qO- https://papermc.io/api/v2/projects/paper/versions/${minecraft_version})
			minecraft_uuid=`echo $temp | rev | cut -d ',' -f 1 | rev | cut -d ']' -f 1`
			minecraft_url="https://papermc.io/api/v2/projects/paper/versions/${minecraft_version}/builds/${minecraft_uuid}/downloads/paper-${minecraft_version}-${minecraft_uuid}.jar"
		else
			minecraft_url="https://papermc.io/api/v1/paper/${minecraft_version}/latest/download"
		fi
	fi

	# SPIGOT SERVER
	# Spigot works as of 1.17.1 with 448m Memory
	if [ "$server" = "spigot" ]; then
		if [ "$minecraft_version" = "latest" ]; then
			echo "Latest JAR Downloader Not Implemented for Spigot Server"
			exit 1
		else
			minecraft_url="https://download.getbukkit.org/spigot/spigot-${minecraft_version}.jar"
		fi
	fi
	
	# Cleanup
	unset temp
	echo "done"

	echo -n "-----> Downloading Minecraft ${server} ${minecraft_version} ${minecraft_uuid}... "
	curl -o minecraft.jar -s -L $minecraft_url
	echo "done"
	#echo -n "-----> Installing Minecraft ${server} ${minecraft_version} ${minecraft_uuid}... "
	#mv minecraft.jar $BUILD_DIR/minecraft.jar
	#echo "done"
else
	echo "Server set to None. Server won't be Downloaded"
fi

if [ -z "$NGROK_API_TOKEN" ]; then
  echo "You must set the NGROK_API_TOKEN config var to create a TCP tunnel!"
  exit 1
fi

# Start the TCP tunnel
ngrok_cmd="bin/ngrok tcp -authtoken $NGROK_API_TOKEN -log stdout --log-level debug ${NGROK_OPTS} ${mc_port}"
echo "Starting ngrok..."
eval "$ngrok_cmd | tee ngrok.log &"
ngrok_pid=$!

# Do an inline sync first, then start the background job
echo "Starting sync..."
bin/sync
if [ "$READ_ONLY" != "true" ]; then
  eval "while true; do sleep ${AWS_SYNC_INTERVAL:-300}; bin/sync; done &"
  sync_pid=$!
fi

# Create Folders
mkdir -p world
mkdir -p plugins
mkdir -p mods

# create server config
echo "server-port=${mc_port}" >> /app/server.properties
echo "server-ip=0.0.0.0" >> /app/server.properties
for f in whitelist banned-players banned-ips ops; do
  test ! -f $f.json && echo -n "[]" > $f.json
done

limit=$(ulimit -u)
case $limit in
  512)   # 2X Dyno
  heap=${MEMORY:-"500m"}
  ;;
  32768) # PX Dyno
  heap=${MEMORY:-"4g"}
  ;;
  *)     # 1X Dyno
  # Setting 1 = 384m
  # Setting 2 = 448m
  # Setting 3 = 500m
  heap=${MEMORY:-"500m"}
  ;;
esac

echo "Starting: minecraft ${mc_port}"
eval "screen -L -h 2048 -dmS minecraft java -Xmx${heap} -Xms${heap} -jar minecraft.jar nogui"
main_pid=$!

# Flush the logfile every second, and ensure that the logfile exists
screen -X "logfile 1" && sleep 1

echo "Tailing log"
eval "tail -f screenlog.0 &"
tail_pid=$!

trap "kill $ngrok_pid $main_pid $sync_pid $tail_pid" SIGTERM
trap "kill -9 $ngrok_pid $main_pid $sync_pid $tail_pid; exit" SIGKILL

#eval "ruby -rwebrick -e'WEBrick::HTTPServer.new(:BindAddress => \"0.0.0.0\", :Port => ${webport}, :MimeTypes => {\"rhtml\" => \"text/html\"}, :DocumentRoot => Dir.pwd).start'"

# DNS Update Section
if [ -n "$DYNU_CLIENT_ID" ]; then
	sleep 10 # Wait 10 Seconds First for Server to Start

	# Grab Full Ngrok Address
	ngrok_address=`cat ngrok.log`
	ngrok_address=${ngrok_address#*tcp://}
	ngrok_address=${ngrok_address%% *}

	# Grab Ngrok IP and Port
	ngrok_ip=`echo $ngrok_address | cut -d ':' -f 1`
	ngrok_ip=`dig +short ${ngrok_ip}`
	ngrok_port=`echo $ngrok_address | cut -d ':' -f 2`

	# Cleanup
	unset ngrok_address

	# Retrieve Dynu Keys
	dynu_client_id=${DYNU_CLIENT_ID}
	dynu_secret=${DYNU_SECRET}
	dynu_full="${dynu_client_id}:${dynu_secret}"

	# Cleanup
	unset dynu_client_id
	unset dynu_secret

	# Retrieve Dynu Token
	dynu_token=`curl --silent -X GET https://api.dynu.com/v2/oauth2/token -H "accept: application/json" -u "${dynu_full}"`
	dynu_token=`echo $dynu_token | cut -d \" -f 4`

	# Cleanup
	unset dynu_full

	# Get Domain Name + ID
	domain=`curl --silent -X GET "https://api.dynu.com/v2/dns" -H "accept: application/json" -H "Authorization: Bearer ${dynu_token}"`
	domain_id=`echo $domain | cut -d \" -f 7`
	domain_id=${domain_id:1:-1}
	domain=`echo $domain | cut -d \" -f 10`

	# Get DNS Records of Domain ID
	dnses=`curl --silent -X GET "https://api.dynu.com/v2/dns/${domain_id}/record" -H "accept: application/json" -H "Authorization: Bearer ${dynu_token}"`
	dnses=${dnses#*id}
	dnses=${dnses#*id}
	dnses_ip=${dnses%%,*}
	dnses_ip=${dnses_ip:2}
	dnses=${dnses#*id}
	dnses_port=${dnses%%,*}
	dnses_port=${dnses_port:2}
	
	# Cleanup
	unset dnses
	
	# Update DNS for Ngrok IP
	curl --silent -X POST "https://api.dynu.com/v2/dns/${domain_id}/record/${dnses_ip}" -H "accept: application/json" -H "Authorization: Bearer ${dynu_token}" -H "Content-Type: application/json" -d "{\"nodeName\":\"mcngrok\",\"recordType\":\"A\",\"ttl\":120,\"state\":true,\"group\":\"\",\"ipv4Address\":\"${ngrok_ip}\"}"
	
	# Update DNS for Ngrok PORT
	curl --silent -X POST "https://api.dynu.com/v2/dns/${domain_id}/record/${dnses_port}" -H "accept: application/json" -H "Authorization: Bearer ${dynu_token}" -H "Content-Type: application/json" -d "{\"nodeName\":\"_minecraft._tcp\",\"recordType\":\"SRV\",\"ttl\":120,\"state\":true,\"group\":\"\",\"host\":\"mcngrok.${domain}\",\"priority\":10,\"weight\":5,\"port\":${ngrok_port}}"
	
	# Cleanup
	unset dynu_token
	unset domain_id
	unset dnses_ip
	unset dnses_port
	unset ngrok_ip
	unset ngrok_port
	
	echo -e "Finished DNS Update! \nConnect to your Server Now at '$domain'"
	
	# Cleanup
	unset domain
fi
# DNS Update Section

# Application Exits unless we Loop Forever here
while :; do
    sleep 10
done
